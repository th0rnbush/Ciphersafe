<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CipherSafe - Local File Encryption</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- react stuff -->
    <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>

    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .transition-all-fast {
            transition: all 0.3s ease-in-out;
        }
        .card {
            background-color: rgba(17, 24, 39, 0.75);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(55, 65, 81, 0.5);
        }
        .btn {
            position: relative;
            overflow: hidden;
        }
        .btn-primary {
            background-color: #4f46e5;
            transition: background-color 0.3s, transform 0.2s;
        }
        .btn-primary:hover:not(:disabled) {
            background-color: #4338ca;
            transform: translateY(-2px);
        }
        .btn-secondary {
            background-color: #374151;
            transition: background-color 0.3s, transform 0.2s;
        }
        .btn-secondary:hover {
            background-color: #4b5563;
             transform: translateY(-2px);
        }
        .drag-over {
            border-color: #4f46e5;
            background-color: rgba(79, 70, 229, 0.1);
        }
        .password-strength-bar {
            height: 4px;
            border-radius: 2px;
            transition: width 0.3s ease-in-out, background-color 0.3s ease-in-out;
        }
        .view {
            display: none;
        }
        .view.active {
            display: block;
            animation: fadeIn 0.5s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* button stuff */
        .btn .btn-text { transition: opacity 0.2s ease-in-out; }
        .btn .btn-loader, .btn .btn-checkmark {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            opacity: 0;
            display: none;
        }
        .btn.loading .btn-text { opacity: 0; }
        .btn.loading .btn-loader {
            display: block;
            opacity: 1;
            animation: spin 1s linear infinite;
        }
        .btn.success .btn-loader { display: none; }
        .btn.success .btn-text { opacity: 0; }
        .btn.success .btn-checkmark {
            display: block;
            opacity: 1;
        }
        .checkmark-circle {
            stroke-dasharray: 166;
            stroke-dashoffset: 166;
            stroke-width: 2;
            stroke-miterlimit: 10;
            stroke: #4ade80;
            fill: none;
            animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
        }
        .checkmark-check {
            transform-origin: 50% 50%;
            stroke-dasharray: 48;
            stroke-dashoffset: 48;
            stroke-width: 3;
            stroke: #4ade80;
            fill: none;
            animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
        }
        @keyframes spin { 100% { transform: translate(-50%, -50%) rotate(360deg); } }
        @keyframes stroke { 100% { stroke-dashoffset: 0; } }
        
        /* profile card stuff, don't ask */
        #profile-card-container {
            width: 180px;
            height: 240px;
            overflow: visible;
        }
        
        #profile-card-container .pc-card-wrapper {
            width: 100%;
            height: 100%;
        }
        
        #profile-card-container .pc-card {
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-200 flex items-center justify-center min-h-screen p-4 overflow-hidden">
    <!-- bg blobs -->
    <div class="absolute top-0 left-0 -translate-x-1/4 -translate-y-1/4 w-96 h-96 bg-purple-600/30 rounded-full filter blur-3xl opacity-50 animate-pulse"></div>
    <div class="absolute bottom-0 right-0 translate-x-1/4 translate-y-1/4 w-96 h-96 bg-indigo-600/30 rounded-full filter blur-3xl opacity-50 animate-pulse delay-2000"></div>

    <main id="app-container" class="relative z-10 w-full max-w-lg">
        <!-- main -->
        <div id="main-view" class="view active">
            <div class="card p-8 rounded-2xl shadow-2xl text-center">
                <div class="mx-auto bg-gray-800 h-16 w-16 rounded-full flex items-center justify-center border border-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-8 w-8 text-indigo-400"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>
                </div>
                <h1 class="text-3xl font-bold text-white mt-6">CipherSafe</h1>
                <p class="text-gray-400 mt-2">Secure your files with client-side AES-256 encryption. Your data never leaves your browser.</p>
                <div class="mt-8 space-y-4">
                    <button onclick="showView('encrypt-view')" class="w-full btn btn-primary text-white font-semibold py-3 rounded-lg shadow-lg">Encrypt a File</button>
                    <button onclick="showView('decrypt-view')" class="w-full btn btn-secondary text-white font-semibold py-3 rounded-lg">Decrypt a File</button>
                </div>
            </div>
        </div>

        <!-- encryption page -->
        <div id="encrypt-view" class="view">
            <div class="card p-8 rounded-2xl shadow-2xl">
                <div class="flex items-center gap-4 mb-6">
                    <button onclick="showView('main-view')" class="p-2 rounded-full hover:bg-gray-700 transition-all-fast">&larr;</button>
                    <h2 class="text-2xl font-bold text-white">Encrypt File</h2>
                </div>
                
                <div id="encrypt-drop-zone" class="border-2 border-dashed border-gray-600 rounded-lg p-10 text-center cursor-pointer transition-all-fast">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mx-auto h-12 w-12 text-gray-500"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="17 8 12 3 7 8"></polyline><line x1="12" y1="3" x2="12" y2="15"></line></svg>
                    <p class="mt-4 text-gray-400">Drag & drop a file here, or click to select</p>
                    <p id="encrypt-file-name" class="mt-2 text-indigo-400 font-medium"></p>
                    <input type="file" id="encrypt-file-input" class="hidden">
                </div>

                <div class="mt-6">
                    <label for="encrypt-password" class="font-medium text-gray-300">Password</label>
                    <div class="relative mt-2">
                        <input type="password" id="encrypt-password" class="w-full bg-gray-800 border border-gray-600 rounded-lg py-2 px-4 text-white focus:ring-2 focus:ring-indigo-500 focus:outline-none">
                        <button onclick="showView('password-generator-view', 'encrypt-password')" class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-indigo-400">Generator</button>
                    </div>
                </div>

                <button id="encrypt-button" onclick="encryptFile()" class="w-full mt-8 btn btn-primary text-white font-semibold py-3 rounded-lg shadow-lg disabled:bg-indigo-800/50 disabled:cursor-not-allowed" disabled>
                    <span class="btn-text">Encrypt & Download</span>
                    <div class="btn-loader w-6 h-6 border-2 border-white/50 border-t-white rounded-full"></div>
                    <svg class="btn-checkmark w-8 h-8" viewBox="0 0 52 52"><circle class="checkmark-circle" cx="26" cy="26" r="25" fill="none"/><path class="checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8"/></svg>
                </button>
            </div>
        </div>

        <!-- decryption page -->
        <div id="decrypt-view" class="view">
            <div class="card p-8 rounded-2xl shadow-2xl">
                <div class="flex items-center gap-4 mb-6">
                    <button onclick="showView('main-view')" class="p-2 rounded-full hover:bg-gray-700 transition-all-fast">&larr;</button>
                    <h2 class="text-2xl font-bold text-white">Decrypt File</h2>
                </div>
                
                <div id="decrypt-drop-zone" class="border-2 border-dashed border-gray-600 rounded-lg p-10 text-center cursor-pointer transition-all-fast">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mx-auto h-12 w-12 text-gray-500"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
                    <p class="mt-4 text-gray-400">Drag & drop a <span class="font-semibold text-indigo-400">.csafe</span> file here, or click</p>
                    <p id="decrypt-file-name" class="mt-2 text-indigo-400 font-medium"></p>
                    <input type="file" id="decrypt-file-input" class="hidden" accept=".csafe">
                </div>

                <div class="mt-6">
                    <label for="decrypt-password" class="font-medium text-gray-300">Password</label>
                    <input type="password" id="decrypt-password" class="w-full mt-2 bg-gray-800 border border-gray-600 rounded-lg py-2 px-4 text-white focus:ring-2 focus:ring-indigo-500 focus:outline-none">
                </div>

                <button id="decrypt-button" onclick="decryptFile()" class="w-full mt-8 btn btn-primary text-white font-semibold py-3 rounded-lg shadow-lg disabled:bg-indigo-800/50 disabled:cursor-not-allowed" disabled>
                    <span class="btn-text">Decrypt & Download</span>
                    <div class="btn-loader w-6 h-6 border-2 border-white/50 border-t-white rounded-full"></div>
                    <svg class="btn-checkmark w-8 h-8" viewBox="0 0 52 52"><circle class="checkmark-circle" cx="26" cy="26" r="25" fill="none"/><path class="checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8"/></svg>
                </button>
            </div>
        </div>

        <!-- password gen -->
        <div id="password-generator-view" class="view">
            <div class="card p-8 rounded-2xl shadow-2xl">
                <div class="flex items-center gap-4 mb-6">
                    <button id="back-to-encrypt-button" onclick="showView('encrypt-view')" class="p-2 rounded-full hover:bg-gray-700 transition-all-fast">&larr;</button>
                    <h2 class="text-2xl font-bold text-white">Password Generator</h2>
                </div>

                <div class="relative bg-gray-800 p-4 rounded-lg">
                    <span id="generated-password" class="text-xl font-mono text-white tracking-wider break-all"></span>
                    <button onclick="copyPassword()" class="absolute right-3 top-3 text-gray-400 hover:text-indigo-400">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-6 w-6"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>
                    </button>
                </div>
                <div class="mt-2 h-1 w-full bg-gray-700 rounded-full">
                    <div id="password-strength-bar" class="password-strength-bar"></div>
                </div>
                <div id="password-strength-text" class="text-xs text-center mt-1 text-gray-400"></div>

                <div class="mt-6 space-y-4">
                    <div class="flex justify-between items-center">
                        <label for="length-slider">Password Length: <span id="length-label">16</span></label>
                        <input type="range" id="length-slider" min="8" max="64" value="16" class="w-1/2">
                    </div>
                    <div class="grid grid-cols-2 gap-x-4 gap-y-3">
                        <div class="flex items-center"><input type="checkbox" id="uppercase" checked class="h-4 w-4 rounded text-indigo-600 focus:ring-indigo-500"><label for="uppercase" class="ml-2">Uppercase (A-Z)</label></div>
                        <div class="flex items-center"><input type="checkbox" id="lowercase" checked class="h-4 w-4 rounded text-indigo-600 focus:ring-indigo-500"><label for="lowercase" class="ml-2">Lowercase (a-z)</label></div>
                        <div class="flex items-center"><input type="checkbox" id="numbers" checked class="h-4 w-4 rounded text-indigo-600 focus:ring-indigo-500"><label for="numbers" class="ml-2">Numbers (0-9)</label></div>
                        <div class="flex items-center"><input type="checkbox" id="symbols" checked class="h-4 w-4 rounded text-indigo-600 focus:ring-indigo-500"><label for="symbols" class="ml-2">Symbols (!@#$)</label></div>
                        <div class="flex items-center"><input type="checkbox" id="ambiguous" class="h-4 w-4 rounded text-indigo-600 focus:ring-indigo-500"><label for="ambiguous" class="ml-2">Exclude Ambiguous</label></div>
                        <div class="flex items-center"><input type="checkbox" id="require-all" checked class="h-4 w-4 rounded text-indigo-600 focus:ring-indigo-500"><label for="require-all" class="ml-2">Require All Sets</label></div>
                    </div>
                </div>
                
                <div class="flex gap-4 mt-8">
                    <button onclick="generatePassword()" class="w-full btn btn-secondary text-white font-semibold py-3 rounded-lg">Generate</button>
                    <button onclick="usePassword()" class="w-full btn btn-primary text-white font-semibold py-3 rounded-lg shadow-lg">Use This Password</button>
                </div>
            </div>
        </div>

        <!-- toast notification -->
        <div id="toast" class="fixed bottom-5 right-5 bg-green-500 text-white py-2 px-5 rounded-lg shadow-xl transition-all duration-500 transform translate-y-20 opacity-0 z-50">
            Password copied to clipboard!
        </div>

    </main>

    <!-- Profile Card Container -->
    <div id="profile-card-container" class="fixed bottom-4 right-4 z-50"></div>

    <script>
        // globals
        let currentView = 'main-view';
        let passwordTargetId = null;
        let encryptFileBlob = null;
        let decryptFileBlob = null;

        // view switching
        function showView(viewId, targetId = null) {
            document.getElementById(currentView).classList.remove('active');
            document.getElementById(viewId).classList.add('active');
            currentView = viewId;
            if (targetId) {
                passwordTargetId = targetId;
            }
            // auto generate pw when opening generator
            if (viewId === 'password-generator-view') {
                generatePassword();
            }
        }

        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = `fixed bottom-5 right-5 text-white py-2 px-5 rounded-lg shadow-xl transition-all duration-500 transform translate-y-20 opacity-0 z-50 ${type === 'success' ? 'bg-green-500' : 'bg-red-500'}`;
            
            setTimeout(() => {
                toast.classList.remove('translate-y-20', 'opacity-0');
                toast.classList.add('translate-y-0', 'opacity-100');
            }, 10);
            
            setTimeout(() => {
                toast.classList.remove('translate-y-0', 'opacity-100');
                toast.classList.add('translate-y-20', 'opacity-0');
            }, 3000);
        }

        // drag drop setup
        function setupDragDrop(zoneId, fileInputId, fileNameId, onFileSelected) {
            const dropZone = document.getElementById(zoneId);
            const fileInput = document.getElementById(fileInputId);
            const fileNameDisplay = document.getElementById(fileNameId);

            dropZone.onclick = () => fileInput.click();
            fileInput.onchange = (e) => handleFiles(e.target.files);

            dropZone.ondragover = (e) => { e.preventDefault(); dropZone.classList.add('drag-over'); };
            dropZone.ondragleave = () => dropZone.classList.remove('drag-over');
            dropZone.ondrop = (e) => {
                e.preventDefault();
                dropZone.classList.remove('drag-over');
                handleFiles(e.dataTransfer.files);
            };

            function handleFiles(files) {
                if (files.length > 0) {
                    const file = files[0];
                    fileNameDisplay.textContent = file.name;
                    onFileSelected(file);
                }
            }
        }
        
        function resetEncryptState() {
            encryptFileBlob = null;
            document.getElementById('encrypt-file-name').textContent = '';
            document.getElementById('encrypt-file-input').value = '';
            document.getElementById('encrypt-password').value = '';
            document.getElementById('encrypt-button').disabled = true;
        }

        function resetDecryptState() {
            decryptFileBlob = null;
            document.getElementById('decrypt-file-name').textContent = '';
            document.getElementById('decrypt-file-input').value = '';
            document.getElementById('decrypt-password').value = '';
            document.getElementById('decrypt-button').disabled = true;
        }

        setupDragDrop('encrypt-drop-zone', 'encrypt-file-input', 'encrypt-file-name', (file) => {
            encryptFileBlob = file;
            document.getElementById('encrypt-button').disabled = !document.getElementById('encrypt-password').value;
        });
        
        setupDragDrop('decrypt-drop-zone', 'decrypt-file-input', 'decrypt-file-name', (file) => {
            decryptFileBlob = file;
            document.getElementById('decrypt-button').disabled = !document.getElementById('decrypt-password').value;
        });

        document.getElementById('encrypt-password').addEventListener('input', (e) => {
            document.getElementById('encrypt-button').disabled = !e.target.value || !encryptFileBlob;
        });
        document.getElementById('decrypt-password').addEventListener('input', (e) => {
            document.getElementById('decrypt-button').disabled = !e.target.value || !decryptFileBlob;
        });


        // pwd generator
        const pwdGenElements = {
            slider: document.getElementById('length-slider'),
            label: document.getElementById('length-label'),
            uppercase: document.getElementById('uppercase'),
            lowercase: document.getElementById('lowercase'),
            numbers: document.getElementById('numbers'),
            symbols: document.getElementById('symbols'),
            ambiguous: document.getElementById('ambiguous'),
            requireAll: document.getElementById('require-all'),
            output: document.getElementById('generated-password'),
            strengthBar: document.getElementById('password-strength-bar'),
            strengthText: document.getElementById('password-strength-text'),
        };

        function generatePassword() {
            const length = pwdGenElements.slider.value;
            let chars = {
                upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                lower: 'abcdefghijklmnopqrstuvwxyz',
                num: '0123456789',
                sym: '!@#$%^&*()_+-=[]{}|;:,.<>?'
            };
            const ambiguousChars = '[]{}()/\\\'"`~,;.<>'; // confusing chars

            if (pwdGenElements.ambiguous.checked) {
                // remove confusing chars
                chars.upper = 'ABCDEFGHJKMNPQRSTUVWXYZ';
                chars.lower = 'abcdefghjkmnpqrstuvwxyz';
                chars.num = '23456789';
                chars.sym = '!@#$%^&*_+=-:?';
            }
            
            let activeCharsets = [];
            if (pwdGenElements.uppercase.checked) activeCharsets.push(chars.upper);
            if (pwdGenElements.lowercase.checked) activeCharsets.push(chars.lower);
            if (pwdGenElements.numbers.checked) activeCharsets.push(chars.num);
            if (pwdGenElements.symbols.checked) activeCharsets.push(chars.sym);

            if (activeCharsets.length === 0) {
                pwdGenElements.output.textContent = 'Select options';
                updatePasswordStrength(0);
                return;
            }

            let password = '';
            let fullCharset = activeCharsets.join('');

            // make sure we have at least one of each type if requireAll is checked
            if (pwdGenElements.requireAll.checked) {
                activeCharsets.forEach(charset => {
                    password += charset.charAt(Math.floor(Math.random() * charset.length));
                });
            }

            // fill the rest
            for (let i = password.length; i < length; i++) {
                password += fullCharset.charAt(Math.floor(Math.random() * fullCharset.length));
            }
            
            // shuffle it up
            password = password.split('').sort(() => 0.5 - Math.random()).join('');

            pwdGenElements.output.textContent = password;
            updatePasswordStrength(calculateEntropy(password, fullCharset));
        }
        
        function calculateEntropy(password, charset) {
            if (!password || !charset) return 0;
            const bits = Math.log2(charset.length) * password.length;
            return Math.min(bits, 128); // cap at 128
        }

        function updatePasswordStrength(entropy) {
            const percentage = (entropy / 128) * 100;
            let color = 'bg-red-500';
            let text = 'Weak';
            if (entropy > 80) { color = 'bg-green-500'; text = 'Strong'; }
            else if (entropy > 50) { color = 'bg-yellow-500'; text = 'Moderate'; }
            
            pwdGenElements.strengthBar.style.width = `${percentage}%`;
            pwdGenElements.strengthBar.className = `password-strength-bar ${color}`;
            pwdGenElements.strengthText.textContent = text;
        }

        pwdGenElements.slider.oninput = () => {
            pwdGenElements.label.textContent = pwdGenElements.slider.value;
        };

        function copyPassword() {
            const password = pwdGenElements.output.textContent;
            if (password && password !== 'Select options') {
                // old school copy
                const textArea = document.createElement("textarea");
                textArea.value = password;
                textArea.style.top = "0";
                textArea.style.left = "0";
                textArea.style.position = "fixed";
                document.body.appendChild(textArea);
                textArea.focus();
                textArea.select();
                try {
                    const successful = document.execCommand('copy');
                    if (successful) showToast('Password copied to clipboard!');
                    else showToast('Failed to copy password.', 'error');
                } catch (err) {
                    showToast('Failed to copy password.', 'error');
                }
                document.body.removeChild(textArea);
            }
        }

        function usePassword() {
            const password = pwdGenElements.output.textContent;
            if (passwordTargetId && password && password !== 'Select options') {
                document.getElementById(passwordTargetId).value = password;
                document.getElementById('encrypt-button').disabled = !encryptFileBlob;
                showView('encrypt-view');
            }
        }

        // crypto functions
        const cryptoUtils = {
            async deriveKey(password, salt) {
                const enc = new TextEncoder();
                const keyMaterial = await window.crypto.subtle.importKey('raw', enc.encode(password), { name: 'PBKDF2' }, false, ['deriveKey']);
                return window.crypto.subtle.deriveKey({ name: 'PBKDF2', salt: salt, iterations: 250000, hash: 'SHA-256' }, keyMaterial, { name: 'AES-GCM', length: 256 }, true, ['encrypt', 'decrypt']);
            },
            async encrypt(data, password) {
                const salt = window.crypto.getRandomValues(new Uint8Array(16));
                const iv = window.crypto.getRandomValues(new Uint8Array(12));
                const key = await this.deriveKey(password, salt);
                const encryptedContent = await window.crypto.subtle.encrypt({ name: 'AES-GCM', iv: iv }, key, data);
                return { salt, iv, encryptedContent };
            },
            async decrypt(encryptedData, password) {
                const { salt, iv, encryptedContent } = encryptedData;
                const key = await this.deriveKey(password, salt);
                try {
                    return await window.crypto.subtle.decrypt({ name: 'AES-GCM', iv: iv }, key, encryptedContent);
                } catch (e) {
                    throw new Error("Decryption failed. Incorrect password or corrupted file.");
                }
            }
        };

        // main logic
        async function handleOperation(buttonId, password, fileBlob, operationFn, successCallback) {
            const button = document.getElementById(buttonId);
            if (!fileBlob || !password) {
                showToast("Please select a file and enter a password.", "error");
                return;
            }
            
            button.classList.add('loading');
            button.disabled = true;

            try {
                await operationFn();
                button.classList.remove('loading');
                button.classList.add('success');
                setTimeout(() => {
                    button.classList.remove('success');
                    successCallback();
                }, 2000);
            } catch (error) {
                console.error("Operation error:", error);
                showToast(error.message, "error");
                button.classList.remove('loading');
                button.disabled = false;
            }
        }

        function encryptFile() {
            const password = document.getElementById('encrypt-password').value;
            handleOperation('encrypt-button', password, encryptFileBlob, async () => {
                const fileBuffer = await encryptFileBlob.arrayBuffer();
                const { salt, iv, encryptedContent } = await cryptoUtils.encrypt(fileBuffer, password);
                const packagedData = {
                    salt: Array.from(salt),
                    iv: Array.from(iv),
                    encryptedContent: Array.from(new Uint8Array(encryptedContent)),
                    type: encryptFileBlob.type // save mime type for later
                };
                const blob = new Blob([JSON.stringify(packagedData)], { type: 'application/json' });
                triggerDownload(blob, `${encryptFileBlob.name}.csafe`);
            }, resetEncryptState);
        }

        function decryptFile() {
            const password = document.getElementById('decrypt-password').value;
            handleOperation('decrypt-button', password, decryptFileBlob, async () => {
                const fileText = await decryptFileBlob.text();
                const packagedData = JSON.parse(fileText);
                const parsedData = {
                    salt: new Uint8Array(packagedData.salt),
                    iv: new Uint8Array(packagedData.iv),
                    encryptedContent: new Uint8Array(packagedData.encryptedContent)
                };
                const decryptedBuffer = await cryptoUtils.decrypt(parsedData, password);
                const blob = new Blob([decryptedBuffer], { type: packagedData.type || 'application/octet-stream' });
                const originalFileName = decryptFileBlob.name.replace(/\.csafe$/, '');
                triggerDownload(blob, originalFileName);
            }, resetDecryptState);
        }

        function triggerDownload(blob, fileName) {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = fileName;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            a.remove();
        }

        // init
        window.onload = () => {
            generatePassword();
        };
    </script>
    
    <!-- React stuff for profile card -->
    <script type="text/babel">
        const ProfileCardCSS = `
            :root {
            --pointer-x: 50%;
            --pointer-y: 50%;
            --pointer-from-center: 0;
            --pointer-from-top: 0.5;
            --pointer-from-left: 0.5;
            --card-opacity: 0;
            --rotate-x: 0deg;
            --rotate-y: 0deg;
            --background-x: 50%;
            --background-y: 50%;
            --grain: none;
            --icon: none;
            --behind-gradient: none;
            --inner-gradient: none;
            --sunpillar-1: hsl(2, 100%, 73%);
            --sunpillar-2: hsl(53, 100%, 69%);
            --sunpillar-3: hsl(93, 100%, 69%);
            --sunpillar-4: hsl(176, 100%, 76%);
            --sunpillar-5: hsl(228, 100%, 74%);
            --sunpillar-6: hsl(283, 100%, 73%);
            --sunpillar-clr-1: var(--sunpillar-1);
            --sunpillar-clr-2: var(--sunpillar-2);
            --sunpillar-clr-3: var(--sunpillar-3);
            --sunpillar-clr-4: var(--sunpillar-4);
            --sunpillar-clr-5: var(--sunpillar-5);
            --sunpillar-clr-6: var(--sunpillar-6);
            --card-radius: 16px;
            }

            .pc-card-wrapper {
            perspective: 500px;
            transform: translate3d(0, 0, 0.1px);
            position: relative;
            touch-action: none;
            width: 100%;
            height: 100%;
            }

            .pc-card-wrapper::before {
            content: '';
            position: absolute;
            inset: -3px;
            background: inherit;
            background-position: inherit;
            border-radius: inherit;
            transition: all 0.5s ease;
            filter: contrast(2) saturate(2) blur(15px);
            transform: scale(0.8) translate3d(0, 0, 0.1px);
            background-size: 100% 100%;
            background-image: var(--behind-gradient);
            }

            .pc-card-wrapper:hover,
            .pc-card-wrapper.active {
            --card-opacity: 1;
            }

            .pc-card-wrapper:hover::before,
            .pc-card-wrapper.active::before {
            filter: contrast(1) saturate(2) blur(20px) opacity(1);
            transform: scale(0.9) translate3d(0, 0, 0.1px);
            }

            .pc-card {
            height: 100%;
            width: 100%;
            display: grid;
            border-radius: var(--card-radius);
            position: relative;
            background-blend-mode: color-dodge, normal, normal, normal;
            animation: glow-bg 12s linear infinite;
            box-shadow: rgba(0, 0, 0, 0.8) calc((var(--pointer-from-left) * 10px) - 3px) calc((var(--pointer-from-top) * 20px) - 6px) 20px -5px;
            transition: transform 1s ease;
            transform: translate3d(0, 0, 0.1px) rotateX(0deg) rotateY(0deg);
            background-size: 100% 100%;
            background-position: 0 0, 0 0, 50% 50%, 0 0;
            background-image: radial-gradient(farthest-side circle at var(--pointer-x) var(--pointer-y), hsla(266, 100%, 90%, var(--card-opacity)) 4%, hsla(266, 50%, 80%, calc(var(--card-opacity) * 0.75)) 10%, hsla(266, 25%, 70%, calc(var(--card-opacity) * 0.5)) 50%, hsla(266, 0%, 60%, 0) 100%), radial-gradient(35% 52% at 55% 20%, #00ffaac4 0%, #073aff00 100%), radial-gradient(100% 100% at 50% 50%, #00c1ffff 1%, #073aff00 76%), conic-gradient(from 124deg at 50% 50%, #c137ffff 0%, #07c6ffff 40%, #07c6ffff 60%, #c137ffff 100%);
            overflow: hidden;
            }

            .pc-card:hover,
            .pc-card.active {
            transition: none;
            transform: translate3d(0, 0, 0.1px) rotateX(var(--rotate-y)) rotateY(var(--rotate-x));
            }

            .pc-card * {
            display: grid;
            grid-area: 1/-1;
            border-radius: var(--card-radius);
            transform: translate3d(0, 0, 0.1px);
            pointer-events: none;
            }

            .pc-inside {
            inset: 1px;
            position: absolute;
            background-image: var(--inner-gradient);
            background-color: rgba(0, 0, 0, 0.85);
            transform: translate3d(0, 0, 0.01px);
            }

            /* rainbow overlay thing */
            .pc-rainbow-grid {
            position: absolute;
            inset: 0;
            z-index: 2;
            opacity: 0;
            transition: opacity 0.6s ease;
            background-image: var(--icon);
            background-size: 80px 80px;
            background-repeat: repeat;
            background-position: center;
            mix-blend-mode: color-dodge;
            filter: brightness(0.5) contrast(0.8) saturate(0.7);
            }

            .pc-card:hover .pc-rainbow-grid,
            .pc-card.active .pc-rainbow-grid {
            opacity: 0.15;
            }

            .pc-shine {
            mask-image: none;
            mask-mode: luminance;
            mask-repeat: repeat;
            mask-size: 120%;
            mask-position: top calc(200% - (var(--background-y) * 5)) left calc(100% - var(--background-x));
            transition: filter 0.6s ease;
            filter: brightness(0.8) contrast(1.5) saturate(0.4) opacity(0.6);
            animation: holo-bg 18s linear infinite;
            mix-blend-mode: color-dodge;
            }

            .pc-shine,
            .pc-shine::after {
            --space: 5%;
            --angle: -45deg;
            transform: translate3d(0, 0, 1px);
            overflow: hidden;
            z-index: 3;
            background: transparent;
            background-size: cover;
            background-position: center;
            background-image: repeating-linear-gradient(0deg, var(--sunpillar-clr-1) calc(var(--space) * 1), var(--sunpillar-clr-2) calc(var(--space) * 2), var(--sunpillar-clr-3) calc(var(--space) * 3), var(--sunpillar-clr-4) calc(var(--space) * 4), var(--sunpillar-clr-5) calc(var(--space) * 5), var(--sunpillar-clr-6) calc(var(--space) * 6), var(--sunpillar-clr-1) calc(var(--space) * 7)), repeating-linear-gradient(var(--angle), #0e152e 0%, hsl(180, 10%, 60%) 3.8%, hsl(180, 29%, 66%) 4.5%, hsl(180, 10%, 60%) 5.2%, #0e152e 10%, #0e152e 12%), radial-gradient(farthest-corner circle at var(--pointer-x) var(--pointer-y), hsla(0, 0%, 0%, 0.1) 12%, hsla(0, 0%, 0%, 0.15) 20%, hsla(0, 0%, 0%, 0.25) 120%);
            background-position: 0 var(--background-y), var(--background-x) var(--background-y), center;
            background-blend-mode: color, hard-light;
            background-size: 500% 500%, 300% 300%, 200% 200%;
            background-repeat: repeat;
            }

            .pc-shine::before,
            .pc-shine::after {
            content: '';
            background-position: center;
            background-size: cover;
            grid-area: 1/1;
            opacity: 0;
            }

            .pc-card:hover .pc-shine,
            .pc-card.active .pc-shine {
            filter: brightness(1) contrast(1.6) saturate(0.6);
            animation: none;
            }

            .pc-card:hover .pc-shine::before,
            .pc-card.active .pc-shine::before,
            .pc-card:hover .pc-shine::after,
            .pc-card.active .pc-shine::after {
            opacity: 1;
            }

            .pc-shine::before {
            background-image: linear-gradient(45deg, var(--sunpillar-4), var(--sunpillar-5), var(--sunpillar-6), var(--sunpillar-1), var(--sunpillar-2), var(--sunpillar-3)), radial-gradient(circle at var(--pointer-x) var(--pointer-y), hsl(0, 0%, 70%) 0%, hsla(0, 0%, 30%, 0.2) 90%);
            background-size: 250% 250%, 100% 100%;
            background-position: var(--pointer-x) var(--pointer-y), center;
            background-blend-mode: color-dodge;
            filter: brightness(calc(2 - var(--pointer-from-center))) contrast(calc(var(--pointer-from-center) + 2)) saturate(calc(0.5 + var(--pointer-from-center)));
            mix-blend-mode: luminosity;
            }

            .pc-shine::after {
            background-position: 0 var(--background-y), calc(var(--background-x) * 0.4) calc(var(--background-y) * 0.5), center;
            background-size: 200% 300%, 700% 700%, 100% 100%;
            mix-blend-mode: difference;
            filter: brightness(0.8) contrast(1.5);
            }

            .pc-glare {
            transform: translate3d(0, 0, 1.1px);
            overflow: hidden;
            background-image: radial-gradient(farthest-corner circle at var(--pointer-x) var(--pointer-y), hsl(248, 25%, 80%) 12%, hsla(207, 40%, 30%, 0.8) 90%);
            mix-blend-mode: overlay;
            filter: brightness(0.8) contrast(1.2);
            z-index: 4;
            }

            .pc-avatar-content {
            mix-blend-mode: screen;
            overflow: hidden;
            position: relative;
            height: 100%;
            }

            .pc-avatar-content .avatar {
            width: 85%;
            position: absolute;
            left: 50%;
            transform: translateX(-50%) scale(1);
            bottom: 2px;
            opacity: calc(1.75 - var(--pointer-from-center));
            }

            .pc-avatar-content::before {
            content: "";
            position: absolute;
            inset: 0;
            z-index: 1;
            backdrop-filter: blur(15px);
            mask: linear-gradient(to bottom,
                rgba(0, 0, 0, 0) 0%,
                rgba(0, 0, 0, 0) 45%,
                rgba(0, 0, 0, 1) 80%,
                rgba(0, 0, 0, 1) 100%);
            pointer-events: none;
            }

            .pc-user-info {
            position: absolute;
            bottom: 6px;
            left: 6px;
            right: 6px;
            z-index: 10;
            display: flex;
            align-items: center;
            justify-content: space-between;
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.08);
            border-radius: 30px;
            padding: 3px 5px;
            pointer-events: auto;
            }

            .pc-user-details {
            display: flex;
            align-items: center;
            gap: 5px;
            }

            .pc-mini-avatar {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.1);
            flex-shrink: 0;
            }

            .pc-mini-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
            }

            .pc-user-text {
            display: flex;
            align-items: flex-start;
            flex-direction: column;
            gap: 1px;
            }

            .pc-handle {
            font-size: 8px;
            font-weight: 500;
            color: rgba(255, 255, 255, 0.9);
            line-height: 1;
            }

            .pc-status {
            font-size: 7px;
            color: rgba(255, 255, 255, 0.6);
            line-height: 1;
            }

            .pc-contact-btn {
            border: 1px solid rgba(255, 255, 255, 0.08);
            border-radius: 30px;
            padding: 2px 6px;
            font-size: 8px;
            font-weight: 600;
            color: rgba(255, 255, 255, 0.9);
            cursor: pointer;
            transition: all 0.2s ease;
            backdrop-filter: blur(10px);
            }

            .pc-contact-btn:hover {
            border-color: rgba(255, 255, 255, 0.3);
            transform: translateY(-0.5px);
            transition: all 0.2s ease;
            }

            .pc-content {
            max-height: 100%;
            overflow: hidden;
            text-align: center;
            position: relative;
            transform: translate3d(calc(var(--pointer-from-left) * -6px + 3px), calc(var(--pointer-from-top) * -6px + 3px), 0.1px) !important;
            z-index: 5;
            mix-blend-mode: luminosity;
            }

            .pc-details {
            width: 100%;
            position: absolute;
            top: 0.8em;
            display: flex;
            flex-direction: column;
            }

            .pc-details h3 {
            font-weight: 600;
            margin: 0;
            font-size: 1.1em;
            background-image: linear-gradient(to bottom, #fff, #6f6fbe);
            background-size: 1em 1.5em;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            -webkit-background-clip: text;
            }

            .pc-details p {
            font-weight: 600;
            position: relative;
            top: -3px;
            white-space: nowrap;
            font-size: 8px;
            margin: 0 auto;
            width: min-content;
            background-image: linear-gradient(to bottom, #fff, #4a4ac0);
            background-size: 1em 1.5em;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            -webkit-background-clip: text;
            }

            @keyframes glow-bg {
            0% { --bgrotate: 0deg; }
            100% { --bgrotate: 360deg; }
            }

            @keyframes holo-bg {
            0% { background-position: 0 var(--background-y), 0 0, center; }
            100% { background-position: 0 var(--background-y), 90% 90%, center; }
            }
        `;

        const DEFAULT_BEHIND_GRADIENT = "radial-gradient(farthest-side circle at var(--pointer-x) var(--pointer-y),hsla(266,100%,90%,var(--card-opacity)) 4%,hsla(266,50%,80%,calc(var(--card-opacity)*0.75)) 10%,hsla(266,25%,70%,calc(var(--card-opacity)*0.5)) 50%,hsla(266,0%,60%,0) 100%),radial-gradient(35% 52% at 55% 20%,#00ffaac4 0%,#073aff00 100%),radial-gradient(100% 100% at 50% 50%,#00c1ffff 1%,#073aff00 76%),conic-gradient(from 124deg at 50% 50%,#c137ffff 0%,#07c6ffff 40%,#07c6ffff 60%,#c137ffff 100%)";
        const DEFAULT_INNER_GRADIENT = "linear-gradient(145deg,#60496e8c 0%,#71C4FF44 100%)";
        const ANIMATION_CONFIG = { SMOOTH_DURATION: 600, INITIAL_DURATION: 1500, INITIAL_X_OFFSET: 50, INITIAL_Y_OFFSET: 40 };
        const clamp = (value, min = 0, max = 100) => Math.min(Math.max(value, min), max);
        const round = (value, precision = 3) => parseFloat(value.toFixed(precision));
        const adjust = (value, fromMin, fromMax, toMin, toMax) => round(toMin + ((toMax - toMin) * (value - fromMin)) / (fromMax - fromMin));
        const easeInOutCubic = (x) => x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2;

        const ProfileCardComponent = ({
            avatarUrl = "https://i.imgur.com/s1xbyvE.jpeg", 
            iconUrl = "https://i.pinimg.com/736x/18/7d/67/187d672b94202d762bffead85db71298.jpg", 
            grainUrl = "https://i.pinimg.com/736x/18/7d/67/187d672b94202d762bffead85db71298.jpg", 
            behindGradient, innerGradient,
            showBehindGradient = true, className = "", enableTilt = true, miniAvatarUrl, name = "thorn",
            title = "Software Engineer & Web Designer", handle = "th0rnbush", status = "Online",
            contactText = "Contact", showUserInfo = true, onContactClick,
        }) => {
            const { useRef, useEffect, useMemo, useCallback } = React;
            const wrapRef = useRef(null);
            const cardRef = useRef(null);

            useEffect(() => {
                const styleElement = document.createElement('style');
                styleElement.innerHTML = ProfileCardCSS;
                document.head.appendChild(styleElement);
                return () => { document.head.removeChild(styleElement); };
            }, []);

            const animationHandlers = useMemo(() => {
                if (!enableTilt) return null;
                let rafId = null;
                const updateCardTransform = (offsetX, offsetY, card, wrap) => {
                    const width = card.clientWidth;
                    const height = card.clientHeight;
                    const percentX = clamp((100 / width) * offsetX);
                    const percentY = clamp((100 / height) * offsetY);
                    const centerX = percentX - 50;
                    const centerY = percentY - 50;
                    const properties = {
                        "--pointer-x": `${percentX}%`, "--pointer-y": `${percentY}%`,
                        "--background-x": `${adjust(percentX, 0, 100, 35, 65)}%`, "--background-y": `${adjust(percentY, 0, 100, 35, 65)}%`,
                        "--pointer-from-center": `${clamp(Math.hypot(percentY - 50, percentX - 50) / 50, 0, 1)}`,
                        "--pointer-from-top": `${percentY / 100}`, "--pointer-from-left": `${percentX / 100}`,
                        "--rotate-x": `${round(-(centerY / 7))}deg`, "--rotate-y": `${round(centerX / 6)}deg`,
                    };
                    Object.entries(properties).forEach(([property, value]) => { wrap.style.setProperty(property, value); });
                };
                const createSmoothAnimation = (duration, startX, startY, card, wrap) => {
                    const startTime = performance.now();
                    const targetX = wrap.clientWidth / 2;
                    const targetY = wrap.clientHeight / 2;
                    const animationLoop = (currentTime) => {
                        const elapsed = currentTime - startTime;
                        const progress = clamp(elapsed / duration);
                        const easedProgress = easeInOutCubic(progress);
                        const currentX = adjust(easedProgress, 0, 1, startX, targetX);
                        const currentY = adjust(easedProgress, 0, 1, startY, targetY);
                        updateCardTransform(currentX, currentY, card, wrap);
                        if (progress < 1) { rafId = requestAnimationFrame(animationLoop); }
                    };
                    rafId = requestAnimationFrame(animationLoop);
                };
                return { updateCardTransform, createSmoothAnimation, cancelAnimation: () => { if (rafId) { cancelAnimationFrame(rafId); rafId = null; } } };
            }, [enableTilt]);

            const handlePointerMove = useCallback((event) => {
                const card = cardRef.current;
                const wrap = wrapRef.current;
                if (!card || !wrap || !animationHandlers) return;
                const rect = card.getBoundingClientRect();
                animationHandlers.updateCardTransform(event.clientX - rect.left, event.clientY - rect.top, card, wrap);
            }, [animationHandlers]);

            const handlePointerEnter = useCallback(() => {
                const card = cardRef.current;
                const wrap = wrapRef.current;
                if (!card || !wrap || !animationHandlers) return;
                animationHandlers.cancelAnimation();
                wrap.classList.add("active");
                card.classList.add("active");
            }, [animationHandlers]);

            const handlePointerLeave = useCallback((event) => {
                const card = cardRef.current;
                const wrap = wrapRef.current;
                if (!card || !wrap || !animationHandlers) return;
                animationHandlers.createSmoothAnimation(ANIMATION_CONFIG.SMOOTH_DURATION, event.offsetX, event.offsetY, card, wrap);
                wrap.classList.remove("active");
                card.classList.remove("active");
            }, [animationHandlers]);

            useEffect(() => {
                if (!enableTilt || !animationHandlers) return;
                const card = cardRef.current;
                const wrap = wrapRef.current;
                if (!card || !wrap) return;
                card.addEventListener("pointerenter", handlePointerEnter);
                card.addEventListener("pointermove", handlePointerMove);
                card.addEventListener("pointerleave", handlePointerLeave);
                const initialX = wrap.clientWidth - ANIMATION_CONFIG.INITIAL_X_OFFSET;
                const initialY = ANIMATION_CONFIG.INITIAL_Y_OFFSET;
                setTimeout(() => {
                    animationHandlers.updateCardTransform(initialX, initialY, card, wrap);
                    animationHandlers.createSmoothAnimation(ANIMATION_CONFIG.INITIAL_DURATION, initialX, initialY, card, wrap);
                }, 100);
                return () => {
                    card.removeEventListener("pointerenter", handlePointerEnter);
                    card.removeEventListener("pointermove", handlePointerMove);
                    card.removeEventListener("pointerleave", handlePointerLeave);
                    animationHandlers.cancelAnimation();
                };
            }, [enableTilt, animationHandlers, handlePointerMove, handlePointerEnter, handlePointerLeave]);

            const cardStyle = useMemo(() => ({
                "--icon": iconUrl ? `url(${iconUrl})` : "none",
                "--grain": grainUrl ? `url(${grainUrl})` : "none",
                "--behind-gradient": showBehindGradient ? (behindGradient || DEFAULT_BEHIND_GRADIENT) : "none",
                "--inner-gradient": innerGradient || DEFAULT_INNER_GRADIENT,
            }), [iconUrl, grainUrl, showBehindGradient, behindGradient, innerGradient]);

            const handleContactClick = useCallback(() => {
                if (onContactClick) {
                    onContactClick();
                }
            }, [onContactClick]);

            return (
                <div ref={wrapRef} className={`pc-card-wrapper ${className}`.trim()} style={cardStyle}>
                    <section ref={cardRef} className="pc-card">
                        <div className="pc-inside">
                            <div className="pc-rainbow-grid" />
                            <div className="pc-shine" />
                            <div className="pc-glare" />
                            <div className="pc-content pc-avatar-content">
                                <img className="avatar" src={avatarUrl} alt={`${name || "User"} avatar`} loading="lazy" onError={(e) => { e.target.style.display = "none"; }} />
                                {showUserInfo && (
                                    <div className="pc-user-info">
                                        <div className="pc-user-details">
                                            <div className="pc-mini-avatar">
                                                <img src={miniAvatarUrl || avatarUrl} alt={`${name || "User"} mini avatar`} loading="lazy" onError={(e) => { e.target.style.opacity = "0.5"; e.target.src = avatarUrl; }} />
                                            </div>
                                            <div className="pc-user-text">
                                                <div className="pc-handle">@{handle}</div>
                                                <div className="pc-status">{status}</div>
                                            </div>
                                        </div>
                                        <button className="pc-contact-btn" onClick={handleContactClick} style={{ pointerEvents: "auto" }} type="button" aria-label={`Contact ${name || "user"}`}>
                                            {contactText}
                                        </button>
                                    </div>
                                )}
                            </div>
                            <div className="pc-content">
                                <div className="pc-details">
                                    <h3>{name}</h3>
                                    <p>{title}</p>
                                </div>
                            </div>
                        </div>
                    </section>
                </div>
            );
        };

        const ProfileCard = React.memo(ProfileCardComponent);

        function App() {
            return (
                <ProfileCard
                    name="thorn"
                    title="Software Engineer & Web Designer"
                    handle="th0rnbush"
                    status="Online"
                    contactText="Contact"
                    avatarUrl="https://i.imgur.com/s1xbyvE.jpeg"
                    miniAvatarUrl="https://i.imgur.com/s1xbyvE.jpeg"
                    iconUrl="https://i.pinimg.com/736x/18/7d/67/187d672b94202d762bffead85db71298.jpg"
                    grainUrl="https://i.pinimg.com/736x/18/7d/67/187d672b94202d762bffead85db71298.jpg"
                    showUserInfo={true}
                    enableTilt={true}
                    onContactClick={() => console.log('Contact clicked')}
                />
            );
        }

        ReactDOM.render(<App />, document.getElementById('profile-card-container'));
    </script>
</body>
</html>
